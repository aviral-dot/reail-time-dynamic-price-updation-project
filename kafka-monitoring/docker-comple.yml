version: '3.8'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
      - "9114:9114"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      JMX_PORT: 9104
      KAFKA_OPTS: "-javaagent:/opt/jmx-exporter/jmx_prometheus_javaagent.jar=9114:/opt/jmx-exporter/zookeeper-jmx-exporter.yml"
    volumes:
      - ./monitoring:/opt/jmx-exporter
    healthcheck:
      test: ["CMD", "bash", "-c", "echo ruok | nc localhost 2181"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - kafka-net
    cpus: 0.25
    mem_limit: 512m

  broker:
    image: confluentinc/cp-kafka:7.4.0
    hostname: broker
    container_name: broker
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
      - "29092:29092"
      - "9103:9103"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_JMX_PORT: 9101
      KAFKA_OPTS: "-javaagent:/opt/jmx-exporter/jmx_prometheus_javaagent.jar=9103:/opt/jmx-exporter/kafka-jmx-exporter.yml"
    volumes:
      - ./monitoring:/opt/jmx-exporter
    healthcheck:
      test: ["CMD", "bash", "-c", "nc -z localhost 9092"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - kafka-net
    cpus: 1.0
    mem_limit: 1500m

  schema-registry:
    image: confluentinc/cp-schema-registry:7.4.0
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      broker:
        condition: service_healthy
    ports:
      - "8083:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://broker:29092
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - kafka-net
    cpus: 0.5
    mem_limit: 1000m

#  control-center:
#    image: confluentinc/cp-enterprise-control-center:7.4.0
 #   hostname: control-center
 #   container_name: control-center
 #   depends_on:
 #     broker:
 #       condition: service_healthy
 #     schema-registry:
 #       condition: service_healthy
 #   ports:
 #     - "9021:9021"
 #   environment:
 #     CONTROL_CENTER_BOOTSTRAP_SERVERS: broker:29092
 #     CONTROL_CENTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
 #     CONTROL_CENTER_REPLICATION_FACTOR: 1
 #     CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
 #     CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
 #     CONFLUENT_METRICS_TOPIC_REPLICATION: 1
 #     CONFLUENT_METRICS_ENABLE: 'false'
 #     PORT: 9021
 #   healthcheck:
 #     test: ["CMD", "curl", "-f", "http://localhost:9021/health"]
 #     interval: 30s
 #     timeout: 10s
  #    retries: 5
  #  networks:
 #     - kafka-net
 #   cpus: 0.5
 #   mem_limit: 1000m

 # prometheus:
 #   image: prom/prometheus
 #   container_name: prometheus
 #   ports:
 #     - "9090:9090"
 #   volumes:
 #     - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
 #   networks:
 #     - kafka-net
 #   cpus: 0.25
 #   mem_limit: 512m

#  grafana:
 #   image: grafana/grafana
 #   container_name: grafana
 #   ports:
 #     - "3000:3000"
 #   volumes:
 #     - grafana-data:/var/lib/grafana
 #   networks:
 #     - kafka-net
 #   cpus: 0.25
 #   mem_limit: 512m

  spark-master:
    image: bitnami/spark:3.4
    container_name: spark-master
    environment:
      - SPARK_MODE=master
    ports:
      - "7077:7077"
      - "8080:8080"
    volumes:
      - ./model:/opt/bitnami/spark/work-dir  
      - ./jars:/opt/spark/jars
    networks:
      - kafka-net
    cpus: 1.0               
    mem_limit: 2g

  spark-worker-1:
    image: bitnami/spark:3.4
    container_name: spark-worker-1
    depends_on:
      - spark-master
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=2g
      - SPARK_WORKER_CORES=2
    ports:
      - "8081:8081"
    volumes:
      - ./model:/opt/bitnami/spark/work-dir
       - ./jars:/opt/spark/jars
    networks:
      - kafka-net
    cpus: 2.0               
    mem_limit: 2g

  mongo1:
    image: mongo:6
    container_name: mongo1
    ports:
      - "27017:27017"
    command: >
       mongod --replSet rs0 --bind_ip_all --auth --keyFile /etc/mongo-keyfile-secure/mongo-keyfile
    volumes:
      - mongo1_data:/data/db
      - mongo-keyfile-vol:/etc/mongo-keyfile-secure:ro
    networks:
      - kafka-net
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
    cpus: 0.15
    mem_limit: 512m

  mongo2:
    image: mongo:6
    container_name: mongo2
    ports:
      - "27018:27017"
    command: >
      mongod --replSet rs0 --bind_ip_all --auth --keyFile /etc/mongo-keyfile-secure/mongo-keyfile
    volumes:
      - mongo2_data:/data/db
      - mongo-keyfile-vol:/etc/mongo-keyfile-secure:ro
    networks:
      - kafka-net
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
    cpus: 0.15
    mem_limit: 512m

  ui-backend:
    build: ./backend
    container_name: ui-backend
    depends_on:
      - mongo1
      - mongo2
    environment:
      - MONGO_URI=mongodb://admin:password@mongo1:27017,mongo2:27017/?replicaSet=rs0&authSource=admin&readPreference=primary
    ports:
      - "3001:3001"
    networks:
      - kafka-net
    cpus: 0.050
    mem_limit: 200m

  ui-frontend:
    build: ./frontend
    container_name: ui-frontend
    depends_on:
      - ui-backend
    ports:
      - "3000:3000"
    networks:
      - kafka-net
    cpus: 0.050
    mem_limit: 200m

volumes:
  grafana-data:
  mongo1_data:
  mongo2_data:
  mongo-keyfile-vol:
    external: true


networks:
  kafka-net:
    driver: bridge
